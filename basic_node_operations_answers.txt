1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

  sort commands.js:   returns the file sorted alphabetically by line.
    output:
        break;
        break;
        commandLibrary.cat(userInputArray.slice(1));
        commandLibrary.echo(userInputArray.slice(1).join(" "));
        done(data);
        if (err) throw err;
        case "cat":
        case "echo":
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
        });
        "cat": function(fullPath) {
        "echo": function(userInput) {
        const command = userInputArray[0];
        const userInputArray = userInput.split(" ");
        process.stdout.write('\nprompt > ');
        process.stdout.write(output);
        switch(command) {
        }
        }
        },
        const commandLibrary = {
        const fs = require("fs");
        function done(output){
        function evaluateCmd(userInput){
        module.exports.commandLibrary = commandLibrary;
        module.exports.evaluateCmd = evaluateCmd;
        }
        }
        };


  wc commands.js:   prints newline, word, and byte counts for a file.
    output: 35      70     780 commands.js


  uniq commands.js:   sorts each line in a file and only returns different lines. If there is a line in a
  file that is the same as a line above it, uniq removes it from the output.
    output:
        const fs = require("fs");

        function done(output){
        process.stdout.write(output);
        process.stdout.write('\nprompt > ');
        }
        function evaluateCmd(userInput){
        const userInputArray = userInput.split(" ");
        const command = userInputArray[0];

        switch(command) {
        case "echo":
          commandLibrary.echo(userInputArray.slice(1).join(" "));
          break;
        case "cat":
          commandLibrary.cat(userInputArray.slice(1));
          break;
        }
        }

        const commandLibrary = {
        "echo": function(userInput) {
        done(userInput);
        },
        "cat": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
          if (err) throw err;
          done(data);
        });
        }
        };

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and
why the specific data was outputted.

  diff commands.js bash.js | wc
    45     131    1093

    This output `45     131    1093` is the word count of the differences between the two files commands.js
    and bash.js

    diff <filename1> <filename2>
      Displays the differences between two files

    wc
      Displays print byte, word, and line counts

6. In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax.
Review the information below before attempting the programming challenge.

Reverse String

Given a string, reverse the order of characters in each word within a sentence while maintaining the original
word order and whitespace and return the string. To improve your problem-solving experience, use the suggested
functions to solve the problem.

Example
Input: "I'm learning to program algorithms!"
Output: "m'I gninrael ot margorp !smhtirogla"


Starter Code

function reverseString(inputString) {
   return inputString.split('').reverse().join('').split(' ').reverse().join(' ');
}

console.log(reverseString('Hello World')); //prints "olleH dlroW"
console.log(reverseString("I'm learning to program algorithms!")); //prints "m'I gninrael ot margorp !smhtirogla"

//The following also works:
function reverseString(inputString) {
  let input = inputString.split(" ");

  let reversedWord = [];

  input.forEach(word => {
    let wordArray = word.split("");
    wordArray.reverse();
    reversedWord.push(wordArray.join(""));
  });
  return reversedWord.join(" ");
}

console.log(reverseString("Hello World")); // prints "olleH dlroW"
console.log(reverseString("I'm learning to program algorithms!")); // prints "m'I gninrael ot margorp !smhtirogla"

/* Helpful Links:
Command line Commands list: https://ss64.com/bash/
Codecademy List: https://www.codecademy.com/articles/command-line-commands
Node documentation: https://nodejs.org/docs/latest-v8.x/api/fs.html#fs_fs_readfile_path_options_callback

*/
